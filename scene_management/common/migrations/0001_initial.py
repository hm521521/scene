# Generated by Django 3.1.7 on 2021-03-30 10:19

import common.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='cameras',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='摄像头名称')),
                ('IP', models.CharField(max_length=200, verbose_name='摄像头的IP地址')),
                ('username', models.CharField(max_length=50, verbose_name='摄像头的用户名')),
                ('password', models.CharField(max_length=200, verbose_name='密码')),
                ('port', models.CharField(max_length=200, verbose_name='端口号')),
            ],
        ),
        migrations.CreateModel(
            name='distribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dis_fun', models.CharField(choices=[(0, 'sigmoid'), (1, 'Gaussian')], max_length=200, verbose_name='分布函数')),
                ('min', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='最小取值')),
                ('max', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='最大取值')),
                ('centre', models.FloatField()),
                ('shape', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='indiactors',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight_sta', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='静态亮度权重')),
                ('weight_chr', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='彩度权重')),
                ('radius', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='评估半径')),
            ],
        ),
        migrations.CreateModel(
            name='IP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('IP_name', models.CharField(max_length=50, verbose_name='IP名称')),
                ('fileurl', models.ImageField(upload_to=common.models.upload_to, verbose_name='IP保存路径')),
                ('age', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('min_age', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('max_age', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
            ],
        ),
        migrations.CreateModel(
            name='sources',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=common.models.upload_to, verbose_name='资源保存的路径')),
                ('name', models.CharField(max_length=50, verbose_name='资源名称')),
                ('unique', models.UUIDField(verbose_name='资源的唯一标识码')),
                ('type', models.IntegerField(choices=[(0, '图片'), (1, '视频')], verbose_name='资源类型')),
            ],
        ),
        migrations.CreateModel(
            name='users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=50, verbose_name='用户名')),
                ('password', models.CharField(max_length=200, verbose_name='密码')),
                ('phonenumber', models.CharField(max_length=50, verbose_name='电话')),
                ('groupid', models.CharField(choices=[(0, '管理员'), (1, '用户')], max_length=50, verbose_name='用户类型')),
            ],
        ),
        migrations.CreateModel(
            name='chorma_indic',
            fields=[
                ('distribute_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='common.distribute')),
                ('chorma', models.CharField(choices=[('constast', '对比色'), ('adjacent', '邻近色'), ('complement', '互补色'), ('analogous', '类似色'), ('harmonious', '色彩和谐度'), ('temrature', '色温'), ('hue', '色差')], max_length=200, verbose_name='彩度选项')),
            ],
            bases=('common.distribute',),
        ),
        migrations.CreateModel(
            name='dyn_bright_indic',
            fields=[
                ('distribute_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='common.distribute')),
                ('dyn_bright', models.CharField(choices=[('strob_num', '频闪次数'), ('peak', '亮度峰值')], max_length=200)),
                ('bright_diff', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(255)], verbose_name='亮度差值')),
                ('span', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(300)], verbose_name='计算动态亮度的时长')),
            ],
            bases=('common.distribute',),
        ),
        migrations.CreateModel(
            name='sta_bright_indic',
            fields=[
                ('distribute_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='common.distribute')),
                ('sta_bright', models.CharField(choices=[('mean', '平均亮度'), ('equilibrium', '亮度分布均匀度')], max_length=200, verbose_name='静态亮度选项')),
                ('sta_thres', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(255)], verbose_name='静态亮度阈值')),
            ],
            bases=('common.distribute',),
        ),
        migrations.CreateModel(
            name='sta_analyze',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mean', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('equilibrum', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('dis_url', models.CharField(max_length=250, verbose_name='亮度曲线路径')),
                ('sta_thres', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(255)], verbose_name='静态阈值')),
                ('sources_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='common.sources', verbose_name='保存在sources表里的id')),
            ],
        ),
        migrations.AddField(
            model_name='sources',
            name='mgrid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='common.users', verbose_name='录入资源的管理员id'),
        ),
        migrations.CreateModel(
            name='scores',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sta_score', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='静态亮度的评分')),
                ('dyn_score', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='动态亮度的评分')),
                ('chr_score', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='彩度的评分')),
                ('score', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='综合评分')),
                ('indicator_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='common.indiactors', verbose_name='选择的指标编号')),
                ('sources_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='common.sources', verbose_name='资源表的编号')),
            ],
        ),
        migrations.CreateModel(
            name='IPattraction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total', models.IntegerField(verbose_name='IP的个数')),
                ('attraction_url', models.CharField(max_length=250, verbose_name='吸引力曲线路径')),
                ('IPid', models.ManyToManyField(to='common.IP', verbose_name='IP的编号')),
                ('sources_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='common.sources', verbose_name='资源编号')),
            ],
        ),
        migrations.CreateModel(
            name='dyn_analyze',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strobnum', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(255)], verbose_name='频闪次数')),
                ('peak', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='峰值亮度')),
                ('dis_url', models.CharField(max_length=250, verbose_name='动态亮度分布曲线路径')),
                ('sources_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='common.sources', verbose_name='保存在sources表里的id')),
            ],
        ),
        migrations.CreateModel(
            name='chr_analyze',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contrat_num', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2000)], verbose_name='对比色的对数')),
                ('adajacent_num', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2000)], verbose_name='邻近色的对数')),
                ('complementary_num', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2000)], verbose_name='互补色的对数')),
                ('analogous_num', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2000)], verbose_name='类似色的对数')),
                ('con_curve', models.CharField(max_length=250, verbose_name='对比色分布曲线路径')),
                ('adj_curve', models.CharField(max_length=250, verbose_name='邻近色分布曲线路径')),
                ('com_curve', models.CharField(max_length=250, verbose_name='互补色分布曲线路径')),
                ('ana_curve', models.CharField(max_length=250, verbose_name='类似色分布曲线路径')),
                ('colors_curve', models.CharField(max_length=250, verbose_name='色彩分布图路径')),
                ('harmonious', models.IntegerField(verbose_name='色彩和谐度')),
                ('temperature', models.CharField(max_length=250, verbose_name='色温曲线路径')),
                ('hue_curve', models.CharField(max_length=250, verbose_name='色调曲线路径')),
                ('sources_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='common.sources', verbose_name='资源编号')),
            ],
        ),
        migrations.CreateModel(
            name='artdata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('sources_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='common.sources', verbose_name='资源表中的编号')),
            ],
        ),
        migrations.AddField(
            model_name='indiactors',
            name='chorma',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='common.chorma_indic', verbose_name='彩度指标'),
        ),
        migrations.AddField(
            model_name='indiactors',
            name='dyn_bright',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='common.dyn_bright_indic', verbose_name='动态亮度指标'),
        ),
        migrations.AddField(
            model_name='indiactors',
            name='sta_bright',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='common.sta_bright_indic', verbose_name='静态亮度指标'),
        ),
    ]
